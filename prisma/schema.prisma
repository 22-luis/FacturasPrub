datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model User {
  id        String   @id @default(cuid())
  name      String   @unique
  password  String
  role      String   // Changed from enum to String for compatibility
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  assignedInvoices Invoice[] @relation("AssignedInvoices")
  routes           Route[]   @relation("UserRoutes") // Relation to routes this user (repartidor) is assigned to

  @@map("users")
}

model Client {
  id          String   @id @default(cuid())
  name        String
  phone       String?
  mainAddress String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  branches Branch[]
  invoices Invoice[] // A client can have many invoices

  @@map("clients")
}

model Branch {
  id           String   @id @default(cuid())
  name         String
  contactPhone String?
  address      String
  clientId     String
  client       Client   @relation(fields: [clientId], references: [id], onDelete: Cascade)
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  @@map("client_branches")
}

model Invoice {
  id                 String   @id @default(cuid())
  invoiceNumber      String   @unique // Ensure invoice numbers are unique
  date               DateTime // Changed to DateTime to store full date
  totalAmount        Float    // Changed from Decimal to Float for compatibility
  supplierName       String
  uniqueCode         String
  address            String?
  status             String   @default("PENDIENTE") // Changed from enum to String
  cancellationReason String?
  assigneeId         String?
  assignee           User?    @relation("AssignedInvoices", fields: [assigneeId], references: [id])
  clientId           String?
  client             Client?  @relation(fields: [clientId], references: [id])
  createdAt          DateTime @default(now())
  updatedAt          DateTime @updatedAt

  // @@index([assigneeId]) // Index for faster queries on assignee
  // @@index([status])     // Index for faster queries on status
  // @@index([date])       // Index for faster queries on date
  @@map("invoices")
}

model Route {
  id           String   @id @default(cuid())
  date         DateTime // Date of the route
  repartidorId String
  repartidor   User     @relation("UserRoutes", fields: [repartidorId], references: [id])
  invoiceIds   String[] // Array of Invoice IDs, order might matter
  status       String   @default("PLANNED") // Changed from enum to String
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  @@index([date])
  @@index([repartidorId])
  @@map("routes")
}
